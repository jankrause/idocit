#summary API-Documentation with Thematic Grids in a nutshell

==Prerequisites:==
 * You can [http://code.google.com/p/idocit/downloads/list download] an undocumented and documented version of the WSDL-artefact used in this tutorial in the Download-section. 
 * We assume that you have successfully installed iDocIt! and use it in its default configuration. 

So, what are we going to learn in this session? 

==Goals:==
 * You know about the semantic gap in current approaches to API-documentation. You are familiar with iDocIt!'s approach to bridge this gap.
 * You know how to work with iDocIt! and how to customize it.

==Create and set up an Eclipse Project:==
Ok, let's get started. At first we need a Web Service Project in our Eclipse IDE.

 # Start Eclipse and open your workspace.
 # Right click into the view "Project Explorer" and choose "New > Project" in the context menu.
 # In the upcoming wizard choose "General > Project" and click "Next".
 # Enter "customer_care_service" as project name and click "Finish".
 # Finally we have to copy the downloaded WSDL-file into the newly created project.

That's it. Now we can start to document it.

==Document the API:==
Well, let's open our undocumented WSDL-file with iDocIt!.

 # Right click on the WSDL-file and choose "iDocIt!".<br/><br/>*Please note:* iDocIt! does not support this context-menu extension for other API-languages like Java yet. This will be implemented with this [http://code.google.com/p/idocit/issues/detail?id=7 issue] – promised ;). For other languages as WSDL choose "Open with … > Other" and then "iDocIt!".<br/>
 # iDocIt! opens its editor. Its GUI is structured as follows:<br/><br/>*Select signature element:*<br/>use this tree to select the element of the API you want to document.<br/><br/>*Overview of recommended roles for …:*<br/>iDocIt! provides semantic recommendations for your documentationn in this tree in form of one or more thematic grids. iDocIt! will show all  thematic grids which hold for the predicate in the operation's identifier. The roles of a grid are highlighted in the following different ways: <br/><br/><table border="1"><tr><td>*Optical Property*</td><td>*Meaning*</td></tr><tr><td>Bold Font</td><td>Mandantory Role: you have to document it.</td></tr><tr><td>Normal Font</td><td>Optional role: for most cases it is recommended to document the role, but you don't have to ;).</td></tr><tr><td>Green Font Color</td><td>This role occurs at least one time in your documentation. This seems to be fine :).</td></tr><tr><td>Red Font Color</td><td>This role is mandantory and has not been documented.</td></tr><tr><td>Orange Font Color</td><td>This role is optional and has not been documented.</td></tr></table><br/>*Document Signature element …:*<br/>here you can enter your documtation text. Initially this area contains no input fields. You can add them by clicking the button "Add thematic role documentation".
 # Expand the tree of signature elements and select the operation "findCustomerById". IdocIt! displays the recommended thematic roles to document immediately.
 # Let's start with the documentation of the performed ACTION. Click on the button „Add Thematic Role documentation“ on the right side of the editor.
 # Select "ACTION" as thematic role and "EXPLICIT" as scope. The explicit scope means that the documented thematic role is visible as element of the declaration of the operation. In this case the identifier of the operation tells us that it finds a customer. So the ACTION is finding a customer. You can describe the ACTION in the textbox, e.g. _Finds the customer with the given id. If no customer is found, null will be returned._ As you can see, iDocIt! marks the role ACTION with bold green font in the tree of recommended roles.
 # Ok, so now you know how to document a thematic role with an explicit scope. But how are implicit scopes handeled? The thematic grid recommends to document a SOURCE. The SOURCE describes the storage where the retrieved customer is saved, e.g. a database. You can see that such a database is not one of the parameters of "findCustomerById". Let's see how it could be documented. Select the operation in the tree again and add a thematic role documentation.<br/><br/>*Please note:* if more than one operation share the same themtic role (e.g. the SOURCE), its documentation also be placed on level of the interface (Port Type). In this case all operations of this interface inherit the documented role.
 # Select SOURCE as thematic role and IMPLICIT as scope. Let's assume that we want to document in which file the database-connection could be configured for the administrator (intgegrator). To add this new addressee click on the tab "+" and choose "Integrator" from the upcoming context menu.
 # Since we are not going to document something for the developer, we should remove the corresponding tab. Select the tab "Developer", click on the tab "-" and confirm the message box with "Yes". 
 # Now enter the documentation-text for the administrator into the textbox: _The datasource is named DATA_SOURCE_CCS and could be configured in the file WEB.INF/web.xml_.
 # Save you documentations by pressing CRTL-S. As you can see, many roles remain to be undocumented. Feel free to document them to get used to iDocIt!'s way of API-Documentation ;).

== How to proceed? ==
We believe, that the set of thematic roles used to be in the API-documentation is very domain specific and should be customized. There will be roles such as e.g. an "Orderer" in a company offering a web shop like Amazon. The propability for this role in a ship auditing company will be close to zero. But there you will find a role "Ship". We made the experience that even within a company, the roles could differ between different software-applications. 